commit 537b7de306a52ed4b35799cfc180e3aa39d0e07a
Author: Th√©ophane Hufschmitt <theophane.hufschmitt@tweag.io>
Date:   Fri Mar 1 06:43:32 2024 +0100

    Ensure best-effort compatibility with older daemon version
    
    Fallback to a full GC if the daemon doesn't support partial ones

diff --git a/src/libstore/remote-store.cc b/src/libstore/remote-store.cc
index fadef45ff..986ea27b7 100644
--- a/src/libstore/remote-store.cc
+++ b/src/libstore/remote-store.cc
@@ -834,6 +834,13 @@ void RemoteStore::collectGarbage(const GCOptions & options, GCResults & results)
 {
     auto conn(getConnection());
 
+    if (
+            options.action != GCOptions::gcDeleteSpecific &&
+            ! options.pathsToDelete.empty() &&
+            GET_PROTOCOL_MINOR(conn->daemonVersion) < 38) {
+        warn("Your daemon version is too old to support garbage collecting a closure, falling back to a full gc");
+    }
+
     conn->to
         << WorkerProto::Op::CollectGarbage << options.action;
     WorkerProto::write(*this, *conn, options.pathsToDelete);
diff --git a/src/libstore/worker-protocol.hh b/src/libstore/worker-protocol.hh
index 91d277b77..af42b4dcb 100644
--- a/src/libstore/worker-protocol.hh
+++ b/src/libstore/worker-protocol.hh
@@ -11,7 +11,7 @@ namespace nix {
 #define WORKER_MAGIC_1 0x6e697863
 #define WORKER_MAGIC_2 0x6478696f
 
-#define PROTOCOL_VERSION (1 << 8 | 37)
+#define PROTOCOL_VERSION (1 << 8 | 38)
 #define GET_PROTOCOL_MAJOR(x) ((x) & 0xff00)
 #define GET_PROTOCOL_MINOR(x) ((x) & 0x00ff)
 
diff --git a/tests/functional/gc-closure.sh b/tests/functional/gc-closure.sh
index e392cad14..e63f43693 100644
--- a/tests/functional/gc-closure.sh
+++ b/tests/functional/gc-closure.sh
@@ -9,13 +9,23 @@ nix_gc_closure() {
     top=$(nix build -f dependencies.nix --no-link --print-out-paths)
     somthing_else=$(nix store add-path ./dependencies.nix)
 
-    # Check that nix store gc is best-effort (doesn't fail when some paths in the closure are alive)
     nix store gc "$top"
-    [[ ! -e "$top" ]] || fail "top should have been deleted"
-    [[ -e "$input0" ]] || fail "input0 is a gc root, shouldn't have been deleted"
-    [[ ! -e "$input2" ]] || fail "input2 is not a gc root and is part of top's closure, it should have been deleted"
-    [[ -e "$input1" ]] || fail "input1 is not ins the closure of top, it shouldn't have been deleted"
-    [[ -e "$somthing_else" ]] || fail "somthing_else is not in the closure of top, it shouldn't have been deleted"
+
+    if isDaemonNewer "2.21.0pre20240229"; then
+        # Check that nix store gc is best-effort (doesn't fail when some paths in the closure are alive)
+        [[ ! -e "$top" ]] || fail "top should have been deleted"
+        [[ -e "$input0" ]] || fail "input0 is a gc root, shouldn't have been deleted"
+        [[ ! -e "$input2" ]] || fail "input2 is not a gc root and is part of top's closure, it should have been deleted"
+        [[ -e "$input1" ]] || fail "input1 is not ins the closure of top, it shouldn't have been deleted"
+        [[ -e "$somthing_else" ]] || fail "somthing_else is not in the closure of top, it shouldn't have been deleted"
+    else
+        # If the daemon is too old to handle closure gc, fallback to a full GC
+        [[ ! -e "$top" ]] || fail "top should have been deleted"
+        [[ -e "$input0" ]] || fail "input0 is a gc root, shouldn't have been deleted"
+        [[ ! -e "$input2" ]] || fail "input2 is not a gc root and is part of top's closure, it should have been deleted"
+        [[ ! -e "$input1" ]] || fail "input1 is not a gc root, it should have been deleted"
+        [[ ! -e "$somthing_else" ]] || fail "somthing_else is not a gc root, it should have been deleted"
+    fi
 }
 
 nix_gc_closure
